@page
@model IndexModel
@{
    ViewData["Title"] = "Activity Voting Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome to Alpine Ski House!</h1>
    <p>Engage with our activities and let us know what you think!</p>
</div>

<div class="container" id="activities-container">
    <!-- Activities will be loaded here dynamically -->
</div>

<template id="activity-template">
    <div class="card my-3">
        <div class="card-body">
            <h5 class="card-title"></h5>
            <p class="card-text"></p>
            <div class="btn-group">
                <button class="btn btn-success like-btn">Like <span class="count"></span></button>
                <button class="btn btn-danger dislike-btn">Dislike <span class="count"></span></button>
            </div>
        </div>
    </div>
</template>

@section Scripts {
    <script>
        // Load activities from the server
        async function loadActivities() {
            try {
                const response = await fetch('/api/activities');
                if (!response.ok) throw new Error('Failed to fetch activities');
                const activities = await response.json();
                const container = document.getElementById('activities-container');
                const template = document.getElementById('activity-template').content;

                container.innerHTML = ''; // Clear previous contents

                activities.forEach(activity => {
                    const clone = template.cloneNode(true);
                    clone.querySelector('.card-title').textContent = activity.name;
                    clone.querySelector('.card-text').textContent = activity.description;
                    clone.querySelector('.like-btn .count').textContent = activity.likes;
                    clone.querySelector('.dislike-btn .count').textContent = activity.dislikes;
                    clone.querySelector('.like-btn').addEventListener('click', () => handleVote(activity.id, true));
                    clone.querySelector('.dislike-btn').addEventListener('click', () => handleVote(activity.id, false));
                    container.appendChild(clone);
                });
            } catch (error) {
                console.error('Error loading activities:', error);
                alert('Error loading activities. Please try again later.');
            }
        }

        // Handle voting
        async function handleVote(activityId, isLike) {
            try {
                const response = await fetch(`/api/activities/${activityId}/vote`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ isLike })
                });

                if (!response.ok) throw new Error('Failed to submit vote');

                const updatedActivity = await response.json();
                const activityCard = document.querySelector(`.card[data-id="${activityId}"]`);
                activityCard.querySelector('.like-btn .count').textContent = updatedActivity.likes;
                activityCard.querySelector('.dislike-btn .count').textContent = updatedActivity.dislikes;

                // Optionally disable buttons after voting
                activityCard.querySelectorAll('button').forEach(btn => btn.disabled = true);
            } catch (error) {
                console.error('Error handling vote:', error);
                alert('Error submitting vote. Please try again later.');
            }
        }

        // Initialize activities on DOM content loaded
        document.addEventListener('DOMContentLoaded', loadActivities);
    </script>
}
